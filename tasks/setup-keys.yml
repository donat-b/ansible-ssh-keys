---

- name: 'get home path'
  shell: 'getent passwd {{ item.user }} | cut -d: -f6'
  changed_when: false
  register: user_home

- name: 'check if key file exists'
  stat:
    path: "{{ user_home.stdout }}/.ssh/{{ item.key_name | default('id_rsa') }}"
  register: key_file

- name: 'ensure ssh key is absent'
  file:
    path: "{{ user_home.stdout }}/.ssh/{{ item.key_name | default('id_rsa') }}"
    state: absent
  when: |
        item.generate_new_key is defined and
        item.generate_new_key and
        item.left_host == inventory_hostname

- name: 'generate ssh key'
  command: "ssh-keygen -N '' -C 'ansible generated key' -f $HOME/.ssh/{{ item.key_name | default('id_rsa') }}"
  become_user: "{{ item.user }}"
  when: |
        (key_file.stat.exists == False or
          (item.generate_new_key is defined and item.generate_new_key)) and
        item.left_host == inventory_hostname

# as there is no way to directly transfer files between remotes...
- name: 'fetch ssh key'
  fetch:
    src: '{{ user_home.stdout }}/.ssh/{{ item.key_name | default('id_rsa') }}.pub'
    dest: '/tmp/id_rsa_{{ user_home.stdout }}_{{ item.right_host }}.pub'
    flat: yes
  when: item.left_host == inventory_hostname

- name: 'set up authorized_key for {{ item.user }}'
  authorized_key:
    user: '{{ item.user }}'
    key: "{{ lookup('file', '/tmp/id_rsa_{{ user_home.stdout }}_{{ item.right_host }}.pub') }}"
    key_options: '{{ item.key_options | default(omit) }}'
    state: '{{ item.state | default("present") }}'
  when: item.right_host == inventory_hostname
